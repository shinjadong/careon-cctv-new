<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, user-scalable=no"><title>PortOne</title><script src="B010077488_data/jquery-1.10.2.min.js"></script><script>
function onScriptLoadFailed(src) {
  try {
    throw new Error('스크립트 (' + src + ') 로드 실패');
  } catch (e) {
    
    var errorCode = 'SCRIPT_LOAD_FAILED_ON_TEMPLATE';
    var errorData = {
      pgProvider: 'tosspay',
      source: '\/payments\/tosspay\/ready_m',
      impUid: null,
      requestData: {},
      scriptSource: src
    };
    onScriptError(e, errorCode, errorData)
  }
}

function onScriptError(e, errorCode, errorData) {
  var requestData = (errorData && errorData.requestData) || {};

  window.parent.postMessage(JSON.stringify({
    action: 'ERROR_ON_TEMPLATE',
    data: {
      success: false,
      request_id: requestData.request_id || null,
      imp_uid: errorData.impUid || null,
      merchant_uid: requestData.merchant_uid || null,
      error_code: errorCode,
      error_msg: e ? e.message : '알 수 없는 이유로 스크립트 실행에 실패하였습니다',
      portoneError: {
        errorCode: errorCode,
        errorData: errorData,
        stackTrace: e ? e.stack : null,
      }
    }
  }), '*');
}

function _response(action, data, source) {
  
  
  
  
  source.postMessage(JSON.stringify({ action: action, data: data }), '*');
}

function IMP_mask_display(display) {
  var op = $.extend({}, display);

  
  
  
  if (Array.isArray(op.card_quota) && op.card_quota.length == 0) {
    op.card_quota = [1];
  }

  return op;
}

window.addEventListener('message', function(e) {
  try {
    var rawMessageData = JSON.parse(e.data);
    if (
      !rawMessageData.hasOwnProperty('action') || 
      rawMessageData.hasOwnProperty('success') || 
      rawMessageData.action === 'communicate' 
    ) { return; }

    $.ajax({
      type : 'POST',
      url: '/events',
      contentType: 'application/json',
      async: true,
      data: JSON.stringify({userCode : 'imp56778396', source: '\/payments\/tosspay\/ready_m', rawRequest: rawMessageData})
    });
  } catch (e) {
    
  }
}, false);
</script><script>
  (function(window) {
    var data = null;
    var errorData = {
      pgProvider: 'tosspay',
      source: '\/payments\/tosspay\/ready_m',
      impUid: null,
      requestData: null,
    };

    window.onerror = function(msg, url, lineNo, columnNo, e) {
      onScriptError(e, 'SCRIPT_ERROR_ON_TEMPLATE', errorData);
    };

    function doPay(orderData, source, origin) {
      var proxyData = {
        formId : 'tosspay',
        action : orderData.checkoutPage,
        target : "_self",
        method : "get",
        param : orderData,
        charset : "utf-8",
        pgProvider : "tosspay"
      }

      _response('proxy.post', proxyData, source, origin);
    }

    function on_message(e) {
      var obj = {},
        action = null,
        request_id = null;
      var source = e.source;
      var origin = e.origin;

      try {
        obj = JSON.parse(e.data);
        action = obj.action;
        data = obj.data || {};
        request_id = data.request_id;
        origin = obj.origin || origin;
      } catch(e) {}

      errorData['requestData'] = data;

      if ( action == 'payment' ) {
        var custom_data = JSON.stringify(data.custom_data);

        $.ajax({
          type : 'POST',
          url : '/toss_payments/prepare.json',
          dataType : 'json',
          data : {
            channel : 'mobile',
            provider : 'tosspay',
            pay_method : 'card',
            channelGroupId: data.channelGroupId,
            amount : data.amount,
            tax_free : data.tax_free,
            name : data.name,
            merchant_uid : data.merchant_uid,
            store_id: 'undefined',
            user_code : 'imp56778396',
            tier_code : data.tier_code,
            request_id : request_id,
            pg_id : 'IMPTsoomgo01',
            channel_key: '',
            buyer_name : data.buyer_name,
            buyer_email : data.buyer_email,
            buyer_tel : data.buyer_tel,
            buyer_addr : data.buyer_addr,
            buyer_postcode : data.buyer_postcode,
            origin : origin,
            m_redirect_url : data.m_redirect_url,
            custom_data : custom_data,
            notice_url : data.notice_url,
            confirm_url : data.confirm_url
          },
          error : function(xhr, status, err) {
            return _response('', {
              success:false,
              request_id:request_id,
              imp_uid: null,
              merchant_uid:data.merchant_uid,
              error_code:'HTTP_ERROR:' + xhr.status,
              error_msg:'결제 시작을 위해 서버와 통신하는 중 에러가 발생하였습니다',
              portoneError: {
                errorCode: 'PREPARE_REQUEST_TO_CONTROLLER_FAILED',
                errorData: errorData
              }
            }, source, origin);
          }
        }).done(function(rsp) {
          errorData['impUid'] = rsp.data.impUid || rsp.data.imp_uid;

          var portoneError = {
            errorCode: rsp.data.portone_error_code || 'PREPARE_UNKNOWN',
            errorData: errorData
          };

          if ( rsp.code == 0 ) {
            doPay(rsp.data, source, origin);
          } else {
            var errorResponse = {
              success: false,
              request_id: request_id,
              imp_uid: rsp.data.impUid || rsp.data.imp_uid,
              merchant_uid: data.merchant_uid,
              error_code: rsp.data.error_code,
              error_msg: rsp.data.error_msg,
              portoneError: portoneError
            };
            _response('', errorResponse, source, origin);
          }
        });
      } else if ( action === 'communicate' && data ) {
        if ( data.result === 'check.closing' ) { 
          location.href = '/toss_payments/closing/' + (data.imp_uid || errorData['impUid']) + '/' + request_id;
        }
      }
    }

    window.addEventListener("message", on_message, false);
  }).call({}, window);
</script></head>

<body style=""></body></html>