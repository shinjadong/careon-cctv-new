<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, user-scalable=no"><title>PortOne</title></head><body style=""><form id="DanalFrm" name="DanalFrm" action="https://ui.teledit.com/Danal/Teledit/EPMobile/Start.php" method="post">
  <input type="hidden" name="CPName" value="">
  <input type="hidden" name="ItemName" value="">
  <input type="hidden" name="ItemAmt" value="">
  <input type="hidden" name="IsPreOtbill" value="N">
  <input type="hidden" name="IsSubscript" value="N">

  
  <input type="hidden" name="UseEasyPay" value="N">
  <input type="hidden" name="BgColor" value="00">

  <input type="hidden" name="TargetURL" value="https://service.iamport.kr/danal_payments/result">

  <input type="hidden" name="BackURL" value="">
  <input type="hidden" name="IsUseCI" value="">
  <input type="hidden" name="CIURL" value="">
  <input type="hidden" name="Email" value="">
  <input type="hidden" name="IsCharSet" value="utf-8">

  <input type="hidden" name="ByPassValue" value="">
  <input type="hidden" name="IsDstAddr" value="">
  <input type="hidden" name="IsCarrier" value="">
  <input type="hidden" name="IsExceptCarrier" value="">

  <input type="hidden" name="IsPeriod" value=""> 
</form>
<script src="B010077488_data/jquery-1.10.2.min.js"></script>
<script>
function onScriptLoadFailed(src) {
  try {
    throw new Error('스크립트 (' + src + ') 로드 실패');
  } catch (e) {
    
    var errorCode = 'SCRIPT_LOAD_FAILED_ON_TEMPLATE';
    var errorData = {
      pgProvider: 'danal',
      source: '\/payments\/danal\/ready_m',
      impUid: null,
      requestData: {},
      scriptSource: src
    };
    onScriptError(e, errorCode, errorData)
  }
}

function onScriptError(e, errorCode, errorData) {
  var requestData = (errorData && errorData.requestData) || {};

  window.parent.postMessage(JSON.stringify({
    action: 'ERROR_ON_TEMPLATE',
    data: {
      success: false,
      request_id: requestData.request_id || null,
      imp_uid: errorData.impUid || null,
      merchant_uid: requestData.merchant_uid || null,
      error_code: errorCode,
      error_msg: e ? e.message : '알 수 없는 이유로 스크립트 실행에 실패하였습니다',
      portoneError: {
        errorCode: errorCode,
        errorData: errorData,
        stackTrace: e ? e.stack : null,
      }
    }
  }), '*');
}

function _response(action, data, source) {
  
  
  
  
  source.postMessage(JSON.stringify({ action: action, data: data }), '*');
}

function IMP_mask_display(display) {
  var op = $.extend({}, display);

  
  
  
  if (Array.isArray(op.card_quota) && op.card_quota.length == 0) {
    op.card_quota = [1];
  }

  return op;
}

window.addEventListener('message', function(e) {
  try {
    var rawMessageData = JSON.parse(e.data);
    if (
      !rawMessageData.hasOwnProperty('action') || 
      rawMessageData.hasOwnProperty('success') || 
      rawMessageData.action === 'communicate' 
    ) { return; }

    $.ajax({
      type : 'POST',
      url: '/events',
      contentType: 'application/json',
      async: true,
      data: JSON.stringify({userCode : 'imp56778396', source: '\/payments\/danal\/ready_m', rawRequest: rawMessageData})
    });
  } catch (e) {
    
  }
}, false);
</script><script>
(function(window) {
  var document = window.document;
  var data = null;
  var errorData = {
    pgProvider: 'danal',
    source: '\/payments\/danal\/ready_m',
    impUid: null,
    requestData: null,
  };

  window.onerror = function(msg, url, lineNo, columnNo, e) {
    onScriptError(e, 'SCRIPT_ERROR_ON_TEMPLATE', errorData);
  };

  var carrierList = ['SKT', 'LGT', 'KTF', 'CJH', 'KCT', 'SKL']

  if (window.addEventListener) {
    window.addEventListener('DOMContentLoaded', function () {
      if (window.performance) {
        var navEntries = window.performance.getEntriesByType('navigation');
        var portoneError = {
          errorCode: 'TRANSACTION_STOPPED',
          errorData: errorData
        };
        if (navEntries.length > 0 && navEntries[0].type === 'back_forward') {
          
          _response('', {
            success: false,
            request_id: null, 
            imp_uid: null,
            merchant_uid: null,
            error_code: 'STOP',
            error_msg: '진행이 중단되었습니다.',
            portoneError: portoneError
          }, window.parent, '*');
        } else if (window.performance.navigation && window.performance.navigation.type == window.performance.navigation.TYPE_BACK_FORWARD) {
          
          _response('', {
            success: false,
            request_id: null, 
            imp_uid: null,
            merchant_uid: null,
            error_code: 'STOP',
            error_msg: '진행이 중단되었습니다.',
            portoneError: portoneError
          }, window.parent, '*');
        }
      }
    });
  }

  function preFilter(data) {
    if ( typeof data.name == 'string' ) {
      data.name = data.name.replace(/['"]/g, ''); 
    }
  }

  function isBuyerTelValid(buyerTel) {
    

    var lengthOfBuyerTel = buyerTel.length;
    return buyerTel.match(/^01\d+$/) && (lengthOfBuyerTel == 10 || lengthOfBuyerTel == 11);
  }

  function filterDisplayCarrierList(phone) {
    var details = phone.detail;
    if(Array.isArray(details)){
      var displayCarrierList = details.some(function(item) {
        return (item.carrier === "*" && !item.enabled);
      }) ? [] : carrierList.slice();

      details.forEach(function(detail) {
        var carrier = detail.carrier;
        var enabled = detail.enabled;
        if (carrierList.indexOf(carrier) !== -1) {
          if (enabled && displayCarrierList.indexOf(carrier) === -1) {
            displayCarrierList.push(carrier);
          }
          if (!enabled && displayCarrierList.indexOf(carrier) !== -1) {
            displayCarrierList.splice(displayCarrierList.indexOf(carrier), 1);
          }
        }
      })

      return displayCarrierList;
    } else {
      return false;
    }
  }

  

  function formatPhoneNumber(phoneNumber) {
    var phoneNumberWithDigit = phoneNumber.replace(/\D+/g,'');
    var lengthOfBuyerTel = phoneNumberWithDigit.length;
    if (phoneNumberWithDigit.match(/^01\d+$/) && (lengthOfBuyerTel === 10 || lengthOfBuyerTel === 11)) {
      return phoneNumberWithDigit;
    } else {
      return null;
    }
  }

  function on_message(e) {
    var obj = {},
      action = null,
      request_id = null;
    var source = e.source;
    var origin = e.origin;

    try {
      obj = JSON.parse(e.data);
      action = obj.action;
      data = obj.data || {};
      request_id = data.request_id;
      origin = obj.origin || origin;
    } catch(e) {}

    errorData['requestData'] = data;

    if ( action == 'payment' ) {
      var custom_data = JSON.stringify(data.custom_data);

      preFilter(data);

      $.ajax({
        type : 'POST',
        url : '/danal_payments/prepare.json',
        dataType : 'json',
        data : {
          channel : 'mobile',
          provider : 'danal',
          pay_method : 'phone', 
          channelGroupId: data.channelGroupId,
          amount : data.amount,
          name : data.name,
          merchant_uid : data.merchant_uid,
          store_id: 'undefined',
          user_code : 'imp56778396',
          tier_code : data.tier_code,
          pg_id : '7010034866',
          channel_key: '',
          buyer_name : data.buyer_name,
          buyer_email : data.buyer_email,
          buyer_tel : data.buyer_tel,
          buyer_addr : data.buyer_addr,
          buyer_postcode : data.buyer_postcode,
          customer_uid : data.customer_uid,
          origin : origin,
          m_redirect_url : data.m_redirect_url,
          custom_data : custom_data,
          notice_url : data.notice_url,
          confirm_url : data.confirm_url,
          customer_id : data.customer_id,
        },
        error : function(xhr, status, err) {
          return _response('', {
            success:false,
            request_id:request_id,
            imp_uid: null,
            merchant_uid: data.merchant_uid,
            error_code:'HTTP_ERROR:' + xhr.status,
            error_msg:'결제 시작을 위해 서버와 통신하는 중 에러가 발생하였습니다',
            portoneError: {
              errorCode: 'PREPARE_REQUEST_TO_CONTROLLER_FAILED',
              errorData: errorData
            }
          }, source, origin);
        }
      }).done(function(rsp) {
        errorData['impUid'] = rsp.data.imp_uid;

        var portoneError = {
          errorCode: rsp.data.portone_error_code || 'PREPARE_UNKNOWN',
          errorData: errorData
        };

        if ( rsp.code == 0 ) {
          var frm = document.forms["DanalFrm"];

          
          frm.elements['BackURL'].value = 'https:\/\/service.iamport.kr/danal_payments/close?imp_uid=' + rsp.data.imp_uid + '&request_id=' + request_id + '&user_code=imp56778396';

          var params = [
            ['imp_uid', rsp.data.imp_uid].join('='),
            ['request_id', request_id].join('='),
            ['user_code', 'imp56778396'].join('=')
          ];
          if ( data.customer_uid ) {
            params.push( ['customer_uid', data.customer_uid].join('=') );
            frm.elements['IsPreOtbill'].value = 'Y';
          }

          frm.elements['ByPassValue'].value = params.join('&');
          frm.elements['CPName'].value = data.company || rsp.data.iamport.name;
          frm.elements['ItemName'].value = rsp.data.iamport.name;
          frm.elements['ItemAmt'].value = rsp.data.iamport.amount;
          frm.elements['Email'].value = data.buyer_email;

          if (data.phone && data.phone.detail) {
            var displayCarrierList = filterDisplayCarrierList(data.phone);

            if (!displayCarrierList) {
              return _response('', {
                success:false,
                request_id:request_id,
                imp_uid: null,
                merchant_uid: rsp.data.merchant_uid,
                error_code:'PHONE_DETAIL_ERROR',
                error_msg:'통신사 노출 파라메터(phone.detail)의 형식이 올바르지 않습니다',
                portoneError: {
                  errorCode: 'PREPARE_REQUEST_VALIDATION_FAILED',
                  errorData: errorData
                }
              }, source, origin);
            }

            if (displayCarrierList.length === 1) {
              frm.elements['IsCarrier'].value = displayCarrierList[0];
            } else {
              var exceptCarrierList = carrierList.filter(function(carrier) {
                return displayCarrierList.indexOf(carrier) === -1;
              });
              frm.elements['IsExceptCarrier'].value = exceptCarrierList.join(';');
            }
          }

          var trimmedBuyerTel = data.buyer_tel && data.buyer_tel.replace(/-/g,'')
          if (data.useBuyerTelAsPhoneNumber && isBuyerTelValid(trimmedBuyerTel)) {
            

            frm.elements['IsDstAddr'].value = trimmedBuyerTel;
          }

          if (data.prefill) {
            var formattedPhoneNumber = formatPhoneNumber(data.prefill.phoneNumber);
            if (formattedPhoneNumber) {
              frm.elements['IsDstAddr'].value = formattedPhoneNumber;
            }
          }

          var danal_elems = rsp.data.danal,
            fragment = document.createDocumentFragment();

          
          for( var key in danal_elems ) {
            var inp = document.createElement('input');
            inp.name = key;
            inp.type = 'hidden';
            inp.value = danal_elems[key];

            fragment.appendChild(inp);
          }

          if ( data.period && data.period.text ) frm.elements['IsPeriod'].value = data.period.text;

          frm.appendChild(fragment);
          frm.submit();
        } else {
          var errorResponse = {
            success: false,
            request_id: request_id,
            imp_uid: rsp.data.imp_uid,
            merchant_uid: data.merchant_uid,
            error_code: rsp.data.error_code,
            error_msg: rsp.data.error_msg,
            portoneError: portoneError
          };
          _response('', errorResponse, source, origin);
        }
      });
    }
  }

  window.addEventListener("message", on_message, false);

}).call({}, window);
</script>
</body></html>