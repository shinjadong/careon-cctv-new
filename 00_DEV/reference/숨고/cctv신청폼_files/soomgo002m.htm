<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, user-scalable=no"><title>PortOne</title></head><body style=""><form name="tranMgr" accept-charset="euc-kr">
  <input type="hidden" name="PayMethod" value="">
  <input type="hidden" name="Amt" value="">
  <input type="hidden" name="GoodsName" value="">
  <input type="hidden" name="GoodsCnt" value="1">
  <input type="hidden" name="MID" value="">
  <input type="hidden" name="Moid" value="">
  <input type="hidden" name="BuyerName" value="">
  <input type="hidden" name="BuyerTel" value="">
  <input type="hidden" name="BuyerEmail" value="">
  <input type="hidden" name="BuyerAddr" value="">
  <input type="hidden" name="VbankExpDate" value="">
  <input type="hidden" name="MallReserved" value="">
  <input type="hidden" name="ReturnURL" value="">
  <input type="hidden" name="RetryURL" value="">
  <input type="hidden" name="WapUrl" value="">
  <input type="hidden" name="IspCancelUrl" value="">
  <input type="hidden" name="Period" value=""> 
  <input type="hidden" name="SelectCardCode" value="">
  <input type="hidden" name="SelectQuota" value="">
  <input type="hidden" name="MultiSelectCardCode" value=""> 
  <input type="hidden" name="MultiSelectQuota" value="">    
  
  <input type="hidden" name="CardShowOpt" value="">
  <input type="hidden" name="DirectShowOpt" value="">
  <input type="hidden" name="NicepayReserved" value="">

  <input type="hidden" name="OptionList" value="">

  
  <input type="hidden" name="SupplyAmt" value="">
  <input type="hidden" name="GoodsVat" value="">
  <input type="hidden" name="ServiceAmt" value="">
  <input type="hidden" name="TaxFreeAmt" value="">

  <input type="hidden" name="TransType" value="0">
  <input type="hidden" name="GoodsCl" value="1"> 
  <input type="hidden" name="CharSet" value="utf-8"> 
  <input type="hidden" name="CancelFlag" value=""> 
  <input type="hidden" name="MallUserID" value="">
  <input type="hidden" name="EncryptData" value="">
  <input type="hidden" name="ediDate" value="">

  <input type="hidden" name="CurrencyCode" value=""> 
</form>
<script src="B010077488_data/jquery-1.10.2.min.js"></script>
<script>
function onScriptLoadFailed(src) {
  try {
    throw new Error('스크립트 (' + src + ') 로드 실패');
  } catch (e) {
    
    var errorCode = 'SCRIPT_LOAD_FAILED_ON_TEMPLATE';
    var errorData = {
      pgProvider: 'nice',
      source: '\/payments\/nice\/ready_m',
      impUid: null,
      requestData: {},
      scriptSource: src
    };
    onScriptError(e, errorCode, errorData)
  }
}

function onScriptError(e, errorCode, errorData) {
  var requestData = (errorData && errorData.requestData) || {};

  window.parent.postMessage(JSON.stringify({
    action: 'ERROR_ON_TEMPLATE',
    data: {
      success: false,
      request_id: requestData.request_id || null,
      imp_uid: errorData.impUid || null,
      merchant_uid: requestData.merchant_uid || null,
      error_code: errorCode,
      error_msg: e ? e.message : '알 수 없는 이유로 스크립트 실행에 실패하였습니다',
      portoneError: {
        errorCode: errorCode,
        errorData: errorData,
        stackTrace: e ? e.stack : null,
      }
    }
  }), '*');
}

function _response(action, data, source) {
  
  
  
  
  source.postMessage(JSON.stringify({ action: action, data: data }), '*');
}

function IMP_mask_display(display) {
  var op = $.extend({}, display);

  
  
  
  if (Array.isArray(op.card_quota) && op.card_quota.length == 0) {
    op.card_quota = [1];
  }

  return op;
}

window.addEventListener('message', function(e) {
  try {
    var rawMessageData = JSON.parse(e.data);
    if (
      !rawMessageData.hasOwnProperty('action') || 
      rawMessageData.hasOwnProperty('success') || 
      rawMessageData.action === 'communicate' 
    ) { return; }

    $.ajax({
      type : 'POST',
      url: '/events',
      contentType: 'application/json',
      async: true,
      data: JSON.stringify({userCode : 'imp56778396', source: '\/payments\/nice\/ready_m', rawRequest: rawMessageData})
    });
  } catch (e) {
    
  }
}, false);
</script><script>
(function(window) {
  var data = null;
  var errorData = {
    pgProvider: 'nice',
    source: '\/payments\/nice\/ready_m',
    impUid: null,
    requestData: null,
  };

  window.onerror = function(msg, url, lineNo, columnNo, e) {
    onScriptError(e, 'SCRIPT_ERROR_ON_TEMPLATE', errorData);
  };

  function toNiceCardCode(stdCode) {
    switch(stdCode) {
      case "361": 
      return "01";

      case "381": 
      return "02";

      case "365": 
      return "04";

      case "366": 
      return "06";

      case "367": 
      return "07";

      case "368": 
      return "08";

      case "370": 
      return "11";

      case "371": 
      return "12";

      case "374": 
      return "16";

      case "041": 
      return "15";

      case "090": 
      return "37";

      case "364": 
      return "21";

      case "369": 
      return "13";

      case "372": 
      return "22";

      case "373": 
      return "23";

      case "002": 
      return "36";

      case "045": 
      return "35";

      case "048": 
      return "14";

      case "071": 
      return "32";

      case "089": 
      return "38";
    }

    return null;
  }

  function toQuotaDigit(q) {
    if ( q < 10 ) {
      if ( q <= 1 )   q = 0; 

      return "0" + q;
    }

    return q.toString();
  }

  function formToJson(frm) {
    var arr = $(frm).serializeArray(),
      obj = {};

    $.each(arr, function() {
      obj[ this.name ] = this.value;
    });

    return obj;
  }

  function goPay(form, source, origin, version) {
    if ( version === "1.1.0" || version === "1.1.1" || version === "1.1.2" || version === "1.1.3" || version === "1.1.4" || version === "1.1.5" || version === "1.1.6" || version === "1.1.7" || version === "1.1.8" || version === "1.2.0" ) {
      var proxyData = {
        formId : form.name,
        action : "https://web.nicepay.co.kr/smart/interfaceURL.jsp",
        target : "_top",
        method : "post",
        param : formToJson(form),
        charset : "euc-kr"
      }

      _response('proxy.post', proxyData, source, origin);
    } else {
      try {
        document.charset = 'euc-kr';
      } catch(e) { 
        document.characterSet = 'EUC-KR';
      }
      form.target = "_top";
      form.method = "post";
      form.action = "https://web.nicepay.co.kr/smart/interfaceURL.jsp";
      form.submit();
    }
  }

  function goPayV2(form, source, origin, version) { 
    if ( version === "1.1.0" || version === "1.1.1" || version === "1.1.2" || version === "1.1.3" || version === "1.1.4" || version === "1.1.5" || version === "1.1.6" || version === "1.1.7" || version === "1.1.8" || version === "1.2.0" ) {
      var proxyData = {
        formId : form.name,
        action : "https://web.nicepay.co.kr/smart/paySmart.jsp",
        target : "_top",
        method : "post",
        param : formToJson(form),
        charset : "euc-kr"
      }

      _response('proxy.post', proxyData, source, origin);
    } else {
      try {
        document.charset = 'euc-kr';
      } catch(e) { 
        document.characterSet = 'EUC-KR';
      }
      form.target = "_top"; 
      form.method = "post";
      form.action = "https://web.nicepay.co.kr/smart/paySmart.jsp";
      form.submit();
    }
  }

  function _pay_method(method) {
    switch(method) {
      case 'card' : 
      case 'kakaopay' : 
      return 'CARD';

      case 'trans' : 
      return 'BANK';

      case 'vbank' : 
      return 'VBANK';

      case 'phone' : 
      return 'CELLPHONE';
    }

    return 'CARD';
  }

  function _category(digital) {
    if ( digital === true ) return '0'; 

    return '1'; 
  }

  function _vbank_due(due) {
    var def = "";
    if (typeof due == 'string') {
      var s = due.replace(/\D/g,'');

      if (s.length >= 12) {
        return s.substr(0, 12);
      } else if (s.length >= 8) {
        return s.substr(0, 8);
      }
    }

    return def;
  }

  function _offerPeriod(period) {
    switch(period.interval) {
      case "month" :
      case "year" :
        return "BILL";

      default :
        if ( period.from && period.to ) return period.from + ":" + period.to;
    }

    return "";
  }

  function _card_quota(amount, display) {
    if ( amount >= 50000 && display && display.card_quota ) {
      var quotaList = ["00"], 
          lenQuota = display.card_quota.length;

      if ( lenQuota == 0 )    return "00"; 

      for (var i = 0; i < lenQuota; i++) {
        var s = toQuotaDigit( display.card_quota[i] );

        var found = false;
        for (var k = quotaList.length - 1; k >= 0; k--) {
          if ( s === quotaList[k] ) {
            found = true;
            break;
          }
        };

        if ( !found )   quotaList.push(s);
      };

      return quotaList.join(",");
    }

    return ""; 
  }

  function _bypass(form, bypass) {
    if ( !bypass )  return;

    var allowed = ["CardShowOpt"];

    for (var i = allowed.length - 1; i >= 0; i--) {
      var key = allowed[i];

      if ( typeof bypass[key] != "undefined" && typeof form.elements[key] != "undefined" )    form.elements[key].value = bypass[key];
    };
  }

  function _options(data) {
    if ( data.language == 'en' ) {
      return 'Lang(EN)';
    } else if ( data.language == 'zh' ) {
      return "Lang(zh)";
    }

    return '';
  }

  function applyDirectCardCall(form, card) {
    if ( card && card.direct && card.direct.code ) {
      
      var niceCode = toNiceCardCode(card.direct.code);
      if ( niceCode ) { 
        var quota = card.direct.quota ? parseInt(card.direct.quota) : 0;
        if ( isNaN(quota) ) quota = 0;

        form.DirectShowOpt.value = "CARD";
        form.SelectCardCode.value = niceCode;
        form.SelectQuota.value = toQuotaDigit(quota);
      }
    }
  }

  function truncateBytes(str, bytes) {
    var s = str || "";
    var len = s.length,
        size = 0;

    for (var i = 0; i < len; i++) {
      if (escape(s.charAt(i)).length == 6) {
        size++;
      }
      size++;

      if (size > bytes) return s.substring(0, i);
    }

    return s;
  }

  function isCurrencyDollar(currency) {
    return currency == 'USD';
  }

  function on_message(e) {
    var obj = {},
      action = null,
      request_id = null;
    var source = e.source;
    var origin = e.origin;

    try {
      obj = JSON.parse(e.data);
      action = obj.action;
      data = obj.data || {};
      request_id = data.request_id;
      origin = obj.origin || origin;
    } catch(e) {}

    errorData['requestData'] = data;

    if ( action == 'payment' ) {
      var custom_data = JSON.stringify(data.custom_data);

      $.ajax({
        type : 'POST',
        url : '/nice_payments/prepare.json',
        dataType : 'json',
        data : {
          channel : 'mobile',
          provider : 'nice',
          pay_method : data.pay_method, 
          channelGroupId: data.channelGroupId,
          escrow : data.escrow,
          amount : data.amount,
          tax_free : data.tax_free,
          name : data.name,
          merchant_uid : data.merchant_uid,
          store_id : 'undefined',
          user_code : 'imp56778396',
          tier_code : data.tier_code,
          pg_id : 'soomgo002m',
          channel_key: '',
          buyer_name : data.buyer_name,
          buyer_email : data.buyer_email,
          buyer_tel : data.buyer_tel,
          buyer_addr : data.buyer_addr,
          buyer_postcode : data.buyer_postcode,
          origin : origin,
          app_scheme : data.app_scheme,
          m_redirect_url : data.m_redirect_url,
          custom_data : custom_data,
          notice_url : data.notice_url,
          confirm_url : data.confirm_url,
          vbank_due : data.vbank_due,
          card : data.card,
          vat_amount: data.vat_amount,
          service_amount: 0,
          currency: data.currency,
          isPromotion: data.isPromotion === undefined ? true : data.isPromotion,
          promotion_id: data.promotion_id,
        },
        error : function(xhr, status, err) {
          return _response('', {
            success:false,
            request_id:request_id,
            imp_uid: null,
            merchant_uid: data.merchant_uid,
            error_code:'HTTP_ERROR:' + xhr.status,
            error_msg:'결제 시작을 위해 서버와 통신하는 중 에러가 발생하였습니다',
            portoneError: {
              errorCode: 'PREPARE_REQUEST_TO_CONTROLLER_FAILED',
              errorData: errorData
            }
          }, source, origin);
        }
      }).done(function(rsp) {
        errorData['impUid'] = rsp.data.imp_uid;

        var portoneError = {
          errorCode: rsp.data.portone_error_code || 'PREPARE_UNKNOWN',
          errorData: errorData
        };

        if ( rsp.code == 0 ) {
          var iamport_base = 'https:\/\/service.iamport.kr';

          
          document.tranMgr.Moid.value = rsp.data.is_use_self_order_id ? data.merchant_uid : rsp.data.imp_uid;

          document.tranMgr.PayMethod.value = _pay_method(data.pay_method);
          document.tranMgr.GoodsCl.value = _category(data.digital);
          document.tranMgr.VbankExpDate.value = _vbank_due(data.vbank_due);
          if ( data.escrow )  document.tranMgr.TransType.value = '1';

          document.tranMgr.MallReserved.value = [
            ['imp_uid', rsp.data.imp_uid].join('='),
            ['request_id', request_id].join('='),
            ['user_code', 'imp56778396'].join('='),
            ['vbank_due', _vbank_due(data.vbank_due)].join('=')
          ].join();

          document.tranMgr.GoodsName.value = truncateBytes(rsp.data.refined_name || data.name, 40);
          document.tranMgr.Amt.value = isCurrencyDollar(data.currency) ? parseInt((rsp.data.amount_detail.amount * 100).toFixed(0)) : rsp.data.amount_detail.amount;
          document.tranMgr.BuyerName.value = rsp.data.refined_buyer || 'anonymous';
          document.tranMgr.BuyerEmail.value =  data.buyer_email;
          document.tranMgr.BuyerAddr.value = data.buyer_addr;
          document.tranMgr.BuyerTel.value = data.buyer_tel;

          document.tranMgr.MID.value = rsp.data.pg_id;
          document.tranMgr.ediDate.value = rsp.data.edi_date;
          document.tranMgr.EncryptData.value = rsp.data.encrypt_data;

          
          if ( typeof data.tax_free == 'number' || typeof data.vat_amount == 'number' ) {
            document.tranMgr.GoodsVat.value = rsp.data.amount_detail.vat_amount;
            document.tranMgr.SupplyAmt.value = rsp.data.amount_detail.supply_amount;
            document.tranMgr.ServiceAmt.value = rsp.data.amount_detail.service_amount;
            document.tranMgr.TaxFreeAmt.value = rsp.data.amount_detail.tax_free;
          }

          var scheme = data.app_scheme || rsp.data.inapp_scheme; 

          if ( scheme ) {
            document.tranMgr.WapUrl.value = scheme + '://';
            document.tranMgr.IspCancelUrl.value = scheme + '://ISPCancel/' + encodeURI(data.merchant_uid);
          }

          
          document.tranMgr.OptionList.value = _options(data);

          
          if ( data.period ) {
            document.tranMgr.Period.value = _offerPeriod(data.period);
          }

          if ( rsp.data.enabled_cards ) { 
            document.tranMgr.MultiSelectCardCode.value = rsp.data.enabled_cards;
          }
          document.tranMgr.MultiSelectQuota.value = _card_quota(rsp.data.amount_detail.amount, data.display);

          
          var suffix = '/' + rsp.data.imp_uid;

          
          if ( data.appCard ) {
            document.tranMgr.CardShowOpt.value = "02:3|04:3|06:3|07:3|08:3|12:3"; 
          }

          
          applyDirectCardCall(document.tranMgr, data.card);

          if (data.pay_method == 'kakaopay') {
            document.tranMgr.DirectShowOpt.value = 'CARD';
            document.tranMgr.NicepayReserved.value = 'DirectKakao=Y';
          }

          if (isCurrencyDollar(data.currency)) {
            document.tranMgr.CurrencyCode.value = 'USD';
          }

          if ( data.niceMobileV2 ) {
            document.tranMgr.ReturnURL.value = iamport_base + '/nice_mobile_payments/returnUrl' + suffix + '/imp56778396';

            
            _bypass(document.tranMgr, data.bypass);

            goPayV2(document.tranMgr, source, origin, obj.version);
          } else {
            document.tranMgr.ReturnURL.value  = iamport_base + '/m_nice_payments/return_url' + suffix;
            document.tranMgr.RetryURL.value   = iamport_base + '/m_nice_payments/retry_url' + suffix;
            document.tranMgr.CancelFlag.value = "0";

            goPay(document.tranMgr, source, origin, obj.version);
          }
        } else {
          var errorResponse = {
            success:false,
            request_id:request_id,
            imp_uid:rsp.data.imp_uid,
            merchant_uid:data.merchant_uid,
            error_code:rsp.data.error_code,
            error_msg:rsp.data.error_msg,
            portoneError: portoneError
          };
          _response('', errorResponse, source, origin); 
        }
      });
    }
  }

  window.addEventListener("message", on_message, false);
}).call({}, window);
</script>
</body></html>